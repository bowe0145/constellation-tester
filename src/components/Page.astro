---
import "../styles/stars/page1.css";
import "../styles/stars/page2.css";
import "../styles/stars/page3.css";
import "../styles/stars/page4.css";
import "../styles/stars/page5.css";
import "../styles/stars/page6.css";
import "../styles/stars/page7.css";
import "../styles/Page.css";
import { ECurrency, type IStar, type TCurrency } from "../core/stars";

import { $stars, findStar } from "../stores/starStore";
import { Star } from "../core/Star";
import { onMount } from "svelte";

interface Props {
  slots?: number;
  currency?: TCurrency;
  num: number;
}

const { slots = 3, currency = ECurrency.Gold, num } = Astro.props;
const stars = Array.from({ length: slots });
onMount(() => {
  stars.map((_, i) => {
    // For each slot, check if there is a star, if not, create one
    const star = findStar(+(num + "" + i));

    if (!star) {
      const newStar = new Star();
      const newId = +(num + "" + i);

      return {
        id: newId,
        star: newStar,
      };
    } else {
      return star;
    }
  });
});
---

<div class="star-page flex flex-col items-center justify-center h-screen">
  <span>Page: {num}</span>
  <div class="star-container" data-page={num.toString()} data-slots={slots}>
    {
      stars.map((star, i) => {
        const starElement =
          (star as { id: number; star: IStar })?.star?.element ?? "unknown";
        const starTier =
          (star as { id: number; star: IStar })?.star?.tier?.toLowerCase() ??
          "mythic";
        const starId = (star as { id: number; star: IStar })?.id ?? i;
        const starClass = starElement.toLowerCase();
        return (
          <button
            class={`star slot ${starClass} ${starTier}`}
            data-star={starId}
          >
            <p class="select-none star-element">{starElement}</p>
            <p class="star-id">{starId}</p>
          </button>
        );
      })
    }
  </div>
</div>

<script>
  import { $stars, updateStar, findStar, addStar } from "../stores/starStore";
  import { Star } from "../core/Star";
  import type { IStar } from "../core/stars";
  import { $activeTab } from "../stores/navigationStore";

  $stars.subscribe((newStore) => {
    RenderUI(newStore);
  });

  const starElements = document.getElementsByClassName("star");
  const container = document.querySelector(".star-container");

  function RenderUI(store: readonly { id: number; star: IStar }[]) {
    // Loop through the immediate children of the container
    // and update the starElement > p.star-element and > p.star-id
    const containers = document.getElementsByClassName("star-container");

    // Find the container with the data-page that corresponds to the current page
    const container = Array.from(containers).find((container) => {
      const containerPage = (container as HTMLElement).dataset.page;
      if (containerPage) {
        return +containerPage === +$activeTab.get();
      } else {
        return false;
      }
    });

    if (container) {
      for (const element of (container as HTMLElement)?.children) {
        const starElement = element as HTMLElement;
        const starId = starElement.dataset.star;

        if (starId) {
          const star = findStar(+starId)?.star;
          const oldStarClass = star?.element?.toLowerCase() ?? "unknown";
          const oldStarTier = star?.tier?.toLowerCase() ?? "mythic";

          // Update the starElements > p.star-element and > p.star-id
          const starElementText = starElement.querySelector(".star-element");
          const starElementId = starElement.querySelector(".star-id");

          if (starElementText && starElementId) {
            starElementText.innerHTML = star?.element ?? "unknown";
            starElementId.innerHTML = starId;

            // Set the starElement class to the new element
            // Remove all classes
            for (const className of starElement.classList) {
              starElement.classList.remove(className);
            }
            starElement.classList.add("star");
            starElement.classList.add("slot");
            starElement.classList.add(
              star?.element?.toLowerCase() ?? "unknown"
            );
            starElement.classList.add(star?.tier?.toLowerCase() ?? "mythic");
          }
        }
      }
    }
  }
</script>
